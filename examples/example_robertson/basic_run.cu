/*
 * run.cu
 *
 *      Author: David Lawrie
 */

#include "go_fish.cuh"
#include "spectrum.h"
#include <chrono>
#include <cstdlib>

auto run_mse_robertson_model(float effect_size, float variance, float N, float num_sites, float mu, unsigned int seed1, unsigned int seed2){
	using cp = Sim_Model::constant_parameter;
	return GO_Fish::run_sim({seed1,seed2,0,num_sites,1}, cp(mu), cp(N), cp(0), Sim_Model::make_stabilizing_cselection_model(effect_size,variance), cp(0), Sim_Model::make_stabilizing_cdominance_model(), Sampling::off(), GO_Fish::allele_trajectories(), Sim_Model::stabilizing_mse_integrand());
}

auto run_mse_robertson_model2(float effect_size, float variance, float N, float num_sites, float mu, unsigned int seed1, unsigned int seed2){
	using cp = Sim_Model::constant_parameter;
    return GO_Fish::run_sim({seed1,seed2,0,num_sites,1}, cp(mu), cp(N), cp(0), Sim_Model::make_stabilizing_selection_model(effect_size,variance), cp(0), Sim_Model::make_stabilizing_dominance_model(), Sampling::off(), GO_Fish::allele_trajectories(), Sim_Model::stabilizing_mse_integrand());
}


void print_mse_robertson_sfs(int sample_size, float effect_size, float variance, float N, float num_sites, float mu){												
    Spectrum::SFS my_spectra_mse;

    std::chrono::time_point<std::chrono::high_resolution_clock> start, end;
    start = std::chrono::high_resolution_clock::now();
    //GO_Fish::allele_trajectories b = run_mse_robertson_model(effect_size, variance, N, num_sites, mu, rand(), rand());
    GO_Fish::allele_trajectories b = run_mse_robertson_model(effect_size, variance, N, num_sites, mu, 0xbeeff00d, 0xdecafbad);
	Spectrum::site_frequency_spectrum(my_spectra_mse,b,0,0,sample_size);

	end = std::chrono::high_resolution_clock::now();
	std::chrono::duration<double,std::milli> elapsed_ms = end - start;
	std::cout<<"\n The effect sizeS is: "<< effect_size << "," << std::endl;
	for(int i = 1; i < sample_size; i++){ std::cout<< my_spectra_mse.frequency_spectrum[i]/my_spectra_mse.num_mutations << ","; }
    std::cout<<"\n Finished experiment with: "<< effect_size << std::endl;;
}

void print_mse_robertson_sfs2(int sample_size, float effect_size, float variance, float N, float num_sites, float mu){												
    Spectrum::SFS my_spectra_mse;

    std::chrono::time_point<std::chrono::high_resolution_clock> start, end;
    start = std::chrono::high_resolution_clock::now();
    //GO_Fish::allele_trajectories b = run_mse_robertson_model(effect_size, variance, N, num_sites, mu, rand(), rand());
    GO_Fish::allele_trajectories b = run_mse_robertson_model2(effect_size, variance, N, num_sites, mu, 0xbeeff00d, 0xdecafbad);
	Spectrum::site_frequency_spectrum(my_spectra_mse,b,0,0,sample_size);

	end = std::chrono::high_resolution_clock::now();
	std::chrono::duration<double,std::milli> elapsed_ms = end - start;
	std::cout<<"\n The variance is: "<< variance << ",";
	for(int i = 1; i < sample_size; i++){ std::cout<< my_spectra_mse.frequency_spectrum[i]/my_spectra_mse.num_mutations << ","; }
    std::cout<<"\n Finished experiment with: "<< variance << std::endl;;
}

auto run_mse_model(float S, float N, float num_sites, float mu, unsigned int seed1, unsigned int seed2){
	using cp = Sim_Model::constant_parameter;
	Sim_Model::effective_parameter eff(N,0);
	return GO_Fish::run_sim({seed1,seed2,0,num_sites,1}, cp(mu), cp(N), cp(0), cp(S), cp(0), cp(0.5), Sampling::off());
}

void print_mse_sfs(int sample_size, float selection, float N, float num_sites, float mu){												
    Spectrum::SFS my_spectra_mse;

    std::chrono::time_point<std::chrono::high_resolution_clock> start, end;
    start = std::chrono::high_resolution_clock::now();

    GO_Fish::allele_trajectories b = run_mse_model(selection, N, num_sites, mu, 0xbeeff00d, 0xdecafbad);
	Spectrum::site_frequency_spectrum(my_spectra_mse,b,0,0,sample_size);

	end = std::chrono::high_resolution_clock::now();
	std::chrono::duration<double,std::milli> elapsed_ms = end - start;
	std::cout<<"\n"<< selection << "," << std::endl;
	for(int i = 1; i < sample_size; i++){ std::cout<< my_spectra_mse.frequency_spectrum[i]/my_spectra_mse.num_mutations << ","; }
}

////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////

int main(int argc, char **argv) { 
    std::vector<float> es = {0.00000000e+00, 5.02512563e-07, 1.00502513e-06, 1.50753769e-06,
       2.01005025e-06, 2.51256281e-06, 3.01507538e-06, 3.51758794e-06,
       4.02010050e-06, 4.52261307e-06, 5.02512563e-06, 5.52763819e-06,
       6.03015075e-06, 6.53266332e-06, 7.03517588e-06, 7.53768844e-06,
       8.04020101e-06, 8.54271357e-06, 9.04522613e-06, 9.54773869e-06,
       1.00502513e-05, 1.05527638e-05, 1.10552764e-05, 1.15577889e-05,
       1.20603015e-05, 1.25628141e-05, 1.30653266e-05, 1.35678392e-05,
       1.40703518e-05, 1.45728643e-05, 1.50753769e-05, 1.55778894e-05,
       1.60804020e-05, 1.65829146e-05, 1.70854271e-05, 1.75879397e-05,
       1.80904523e-05, 1.85929648e-05, 1.90954774e-05, 1.95979899e-05,
       2.01005025e-05, 2.06030151e-05, 2.11055276e-05, 2.16080402e-05,
       2.21105528e-05, 2.26130653e-05, 2.31155779e-05, 2.36180905e-05,
       2.41206030e-05, 2.46231156e-05, 2.51256281e-05, 2.56281407e-05,
       2.61306533e-05, 2.66331658e-05, 2.71356784e-05, 2.76381910e-05,
       2.81407035e-05, 2.86432161e-05, 2.91457286e-05, 2.96482412e-05,
       3.01507538e-05, 3.06532663e-05, 3.11557789e-05, 3.16582915e-05,
       3.21608040e-05, 3.26633166e-05, 3.31658291e-05, 3.36683417e-05,
       3.41708543e-05, 3.46733668e-05, 3.51758794e-05, 3.56783920e-05,
       3.61809045e-05, 3.66834171e-05, 3.71859296e-05, 3.76884422e-05,
       3.81909548e-05, 3.86934673e-05, 3.91959799e-05, 3.96984925e-05,
       4.02010050e-05, 4.07035176e-05, 4.12060302e-05, 4.17085427e-05,
       4.22110553e-05, 4.27135678e-05, 4.32160804e-05, 4.37185930e-05,
       4.42211055e-05, 4.47236181e-05, 4.52261307e-05, 4.57286432e-05,
       4.62311558e-05, 4.67336683e-05, 4.72361809e-05, 4.77386935e-05,
       4.82412060e-05, 4.87437186e-05, 4.92462312e-05, 4.97487437e-05,
       5.02512563e-05, 5.07537688e-05, 5.12562814e-05, 5.17587940e-05,
       5.22613065e-05, 5.27638191e-05, 5.32663317e-05, 5.37688442e-05,
       5.42713568e-05, 5.47738693e-05, 5.52763819e-05, 5.57788945e-05,
       5.62814070e-05, 5.67839196e-05, 5.72864322e-05, 5.77889447e-05,
       5.82914573e-05, 5.87939698e-05, 5.92964824e-05, 5.97989950e-05,
       6.03015075e-05, 6.08040201e-05, 6.13065327e-05, 6.18090452e-05,
       6.23115578e-05, 6.28140704e-05, 6.33165829e-05, 6.38190955e-05,
       6.43216080e-05, 6.48241206e-05, 6.53266332e-05, 6.58291457e-05,
       6.63316583e-05, 6.68341709e-05, 6.73366834e-05, 6.78391960e-05,
       6.83417085e-05, 6.88442211e-05, 6.93467337e-05, 6.98492462e-05,
       7.03517588e-05, 7.08542714e-05, 7.13567839e-05, 7.18592965e-05,
       7.23618090e-05, 7.28643216e-05, 7.33668342e-05, 7.38693467e-05,
       7.43718593e-05, 7.48743719e-05, 7.53768844e-05, 7.58793970e-05,
       7.63819095e-05, 7.68844221e-05, 7.73869347e-05, 7.78894472e-05,
       7.83919598e-05, 7.88944724e-05, 7.93969849e-05, 7.98994975e-05,
       8.04020101e-05, 8.09045226e-05, 8.14070352e-05, 8.19095477e-05,
       8.24120603e-05, 8.29145729e-05, 8.34170854e-05, 8.39195980e-05,
       8.44221106e-05, 8.49246231e-05, 8.54271357e-05, 8.59296482e-05,
       8.64321608e-05, 8.69346734e-05, 8.74371859e-05, 8.79396985e-05,
       8.84422111e-05, 8.89447236e-05, 8.94472362e-05, 8.99497487e-05,
       9.04522613e-05, 9.09547739e-05, 9.14572864e-05, 9.19597990e-05,
       9.24623116e-05, 9.29648241e-05, 9.34673367e-05, 9.39698492e-05,
       9.44723618e-05, 9.49748744e-05, 9.54773869e-05, 9.59798995e-05,
       9.64824121e-05, 9.69849246e-05, 9.74874372e-05, 9.79899497e-05,
       9.84924623e-05, 9.89949749e-05, 9.94974874e-05, 1.00000000e-04,
       1.04522613e-04, 1.09045226e-04, 1.13567839e-04, 1.18090452e-04,
       1.22613065e-04, 1.27135678e-04, 1.31658291e-04, 1.36180905e-04,
       1.40703518e-04, 1.45226131e-04, 1.49748744e-04, 1.54271357e-04,
       1.58793970e-04, 1.63316583e-04, 1.67839196e-04, 1.72361809e-04,
       1.76884422e-04, 1.81407035e-04, 1.85929648e-04, 1.90452261e-04,
       1.94974874e-04, 1.99497487e-04, 2.04020101e-04, 2.08542714e-04,
       2.13065327e-04, 2.17587940e-04, 2.22110553e-04, 2.26633166e-04,
       2.31155779e-04, 2.35678392e-04, 2.40201005e-04, 2.44723618e-04,
       2.49246231e-04, 2.53768844e-04, 2.58291457e-04, 2.62814070e-04,
       2.67336683e-04, 2.71859296e-04, 2.76381910e-04, 2.80904523e-04,
       2.85427136e-04, 2.89949749e-04, 2.94472362e-04, 2.98994975e-04,
       3.03517588e-04, 3.08040201e-04, 3.12562814e-04, 3.17085427e-04,
       3.21608040e-04, 3.26130653e-04, 3.30653266e-04, 3.35175879e-04,
       3.39698492e-04, 3.44221106e-04, 3.48743719e-04, 3.53266332e-04,
       3.57788945e-04, 3.62311558e-04, 3.66834171e-04, 3.71356784e-04,
       3.75879397e-04, 3.80402010e-04, 3.84924623e-04, 3.89447236e-04,
       3.93969849e-04, 3.98492462e-04, 4.03015075e-04, 4.07537688e-04,
       4.12060302e-04, 4.16582915e-04, 4.21105528e-04, 4.25628141e-04,
       4.30150754e-04, 4.34673367e-04, 4.39195980e-04, 4.43718593e-04,
       4.48241206e-04, 4.52763819e-04, 4.57286432e-04, 4.61809045e-04,
       4.66331658e-04, 4.70854271e-04, 4.75376884e-04, 4.79899497e-04,
       4.84422111e-04, 4.88944724e-04, 4.93467337e-04, 4.97989950e-04,
       5.02512563e-04, 5.07035176e-04, 5.11557789e-04, 5.16080402e-04,
       5.20603015e-04, 5.25125628e-04, 5.29648241e-04, 5.34170854e-04,
       5.38693467e-04, 5.43216080e-04, 5.47738693e-04, 5.52261307e-04,
       5.56783920e-04, 5.61306533e-04, 5.65829146e-04, 5.70351759e-04,
       5.74874372e-04, 5.79396985e-04, 5.83919598e-04, 5.88442211e-04,
       5.92964824e-04, 5.97487437e-04, 6.02010050e-04, 6.06532663e-04,
       6.11055276e-04, 6.15577889e-04, 6.20100503e-04, 6.24623116e-04,
       6.29145729e-04, 6.33668342e-04, 6.38190955e-04, 6.42713568e-04,
       6.47236181e-04, 6.51758794e-04, 6.56281407e-04, 6.60804020e-04,
       6.65326633e-04, 6.69849246e-04, 6.74371859e-04, 6.78894472e-04,
       6.83417085e-04, 6.87939698e-04, 6.92462312e-04, 6.96984925e-04,
       7.01507538e-04, 7.06030151e-04, 7.10552764e-04, 7.15075377e-04,
       7.19597990e-04, 7.24120603e-04, 7.28643216e-04, 7.33165829e-04,
       7.37688442e-04, 7.42211055e-04, 7.46733668e-04, 7.51256281e-04,
       7.55778894e-04, 7.60301508e-04, 7.64824121e-04, 7.69346734e-04,
       7.73869347e-04, 7.78391960e-04, 7.82914573e-04, 7.87437186e-04,
       7.91959799e-04, 7.96482412e-04, 8.01005025e-04, 8.05527638e-04,
       8.10050251e-04, 8.14572864e-04, 8.19095477e-04, 8.23618090e-04,
       8.28140704e-04, 8.32663317e-04, 8.37185930e-04, 8.41708543e-04,
       8.46231156e-04, 8.50753769e-04, 8.55276382e-04, 8.59798995e-04,
       8.64321608e-04, 8.68844221e-04, 8.73366834e-04, 8.77889447e-04,
       8.82412060e-04, 8.86934673e-04, 8.91457286e-04, 8.95979899e-04,
       9.00502513e-04, 9.05025126e-04, 9.09547739e-04, 9.14070352e-04,
       9.18592965e-04, 9.23115578e-04, 9.27638191e-04, 9.32160804e-04,
       9.36683417e-04, 9.41206030e-04, 9.45728643e-04, 9.50251256e-04,
       9.54773869e-04, 9.59296482e-04, 9.63819095e-04, 9.68341709e-04,
       9.72864322e-04, 9.77386935e-04, 9.81909548e-04, 9.86432161e-04,
       9.90954774e-04, 9.95477387e-04, 1.00000000e-03, 1.04522613e-03,
       1.09045226e-03, 1.13567839e-03, 1.18090452e-03, 1.22613065e-03,
       1.27135678e-03, 1.31658291e-03, 1.36180905e-03, 1.40703518e-03,
       1.45226131e-03, 1.49748744e-03, 1.54271357e-03, 1.58793970e-03,
       1.63316583e-03, 1.67839196e-03, 1.72361809e-03, 1.76884422e-03,
       1.81407035e-03, 1.85929648e-03, 1.90452261e-03, 1.94974874e-03,
       1.99497487e-03, 2.04020101e-03, 2.08542714e-03, 2.13065327e-03,
       2.17587940e-03, 2.22110553e-03, 2.26633166e-03, 2.31155779e-03,
       2.35678392e-03, 2.40201005e-03, 2.44723618e-03, 2.49246231e-03,
       2.53768844e-03, 2.58291457e-03, 2.62814070e-03, 2.67336683e-03,
       2.71859296e-03, 2.76381910e-03, 2.80904523e-03, 2.85427136e-03,
       2.89949749e-03, 2.94472362e-03, 2.98994975e-03, 3.03517588e-03,
       3.08040201e-03, 3.12562814e-03, 3.17085427e-03, 3.21608040e-03,
       3.26130653e-03, 3.30653266e-03, 3.35175879e-03, 3.39698492e-03,
       3.44221106e-03, 3.48743719e-03, 3.53266332e-03, 3.57788945e-03,
       3.62311558e-03, 3.66834171e-03, 3.71356784e-03, 3.75879397e-03,
       3.80402010e-03, 3.84924623e-03, 3.89447236e-03, 3.93969849e-03,
       3.98492462e-03, 4.03015075e-03, 4.07537688e-03, 4.12060302e-03,
       4.16582915e-03, 4.21105528e-03, 4.25628141e-03, 4.30150754e-03,
       4.34673367e-03, 4.39195980e-03, 4.43718593e-03, 4.48241206e-03,
       4.52763819e-03, 4.57286432e-03, 4.61809045e-03, 4.66331658e-03,
       4.70854271e-03, 4.75376884e-03, 4.79899497e-03, 4.84422111e-03,
       4.88944724e-03, 4.93467337e-03, 4.97989950e-03, 5.02512563e-03,
       5.07035176e-03, 5.11557789e-03, 5.16080402e-03, 5.20603015e-03,
       5.25125628e-03, 5.29648241e-03, 5.34170854e-03, 5.38693467e-03,
       5.43216080e-03, 5.47738693e-03, 5.52261307e-03, 5.56783920e-03,
       5.61306533e-03, 5.65829146e-03, 5.70351759e-03, 5.74874372e-03,
       5.79396985e-03, 5.83919598e-03, 5.88442211e-03, 5.92964824e-03,
       5.97487437e-03, 6.02010050e-03, 6.06532663e-03, 6.11055276e-03,
       6.15577889e-03, 6.20100503e-03, 6.24623116e-03, 6.29145729e-03,
       6.33668342e-03, 6.38190955e-03, 6.42713568e-03, 6.47236181e-03,
       6.51758794e-03, 6.56281407e-03, 6.60804020e-03, 6.65326633e-03,
       6.69849246e-03, 6.74371859e-03, 6.78894472e-03, 6.83417085e-03,
       6.87939698e-03, 6.92462312e-03, 6.96984925e-03, 7.01507538e-03,
       7.06030151e-03, 7.10552764e-03, 7.15075377e-03, 7.19597990e-03,
       7.24120603e-03, 7.28643216e-03, 7.33165829e-03, 7.37688442e-03,
       7.42211055e-03, 7.46733668e-03, 7.51256281e-03, 7.55778894e-03,
       7.60301508e-03, 7.64824121e-03, 7.69346734e-03, 7.73869347e-03,
       7.78391960e-03, 7.82914573e-03, 7.87437186e-03, 7.91959799e-03,
       7.96482412e-03, 8.01005025e-03, 8.05527638e-03, 8.10050251e-03,
       8.14572864e-03, 8.19095477e-03, 8.23618090e-03, 8.28140704e-03,
       8.32663317e-03, 8.37185930e-03, 8.41708543e-03, 8.46231156e-03,
       8.50753769e-03, 8.55276382e-03, 8.59798995e-03, 8.64321608e-03,
       8.68844221e-03, 8.73366834e-03, 8.77889447e-03, 8.82412060e-03,
       8.86934673e-03, 8.91457286e-03, 8.95979899e-03, 9.00502513e-03,
       9.05025126e-03, 9.09547739e-03, 9.14070352e-03, 9.18592965e-03,
       9.23115578e-03, 9.27638191e-03, 9.32160804e-03, 9.36683417e-03,
       9.41206030e-03, 9.45728643e-03, 9.50251256e-03, 9.54773869e-03,
       9.59296482e-03, 9.63819095e-03, 9.68341709e-03, 9.72864322e-03,
       9.77386935e-03, 9.81909548e-03, 9.86432161e-03, 9.90954774e-03,
       9.95477387e-03, 1.00000000e-02, 1.09090909e-02, 1.18181818e-02,
       1.27272727e-02, 1.36363636e-02, 1.45454545e-02, 1.54545455e-02,
       1.63636364e-02, 1.72727273e-02, 1.81818182e-02, 1.90909091e-02,
       2.00000000e-02, 2.09090909e-02, 2.18181818e-02, 2.27272727e-02,
       2.36363636e-02, 2.45454545e-02, 2.54545455e-02, 2.63636364e-02,
       2.72727273e-02, 2.81818182e-02, 2.90909091e-02, 3.00000000e-02,
       3.09090909e-02, 3.18181818e-02, 3.27272727e-02, 3.36363636e-02,
       3.45454545e-02, 3.54545455e-02, 3.63636364e-02, 3.72727273e-02,
       3.81818182e-02, 3.90909091e-02, 4.00000000e-02, 4.09090909e-02,
       4.18181818e-02, 4.27272727e-02, 4.36363636e-02, 4.45454545e-02,
       4.54545455e-02, 4.63636364e-02, 4.72727273e-02, 4.81818182e-02,
       4.90909091e-02, 5.00000000e-02, 5.09090909e-02, 5.18181818e-02,
       5.27272727e-02, 5.36363636e-02, 5.45454545e-02, 5.54545455e-02,
       5.63636364e-02, 5.72727273e-02, 5.81818182e-02, 5.90909091e-02,
       6.00000000e-02, 6.09090909e-02, 6.18181818e-02, 6.27272727e-02,
       6.36363636e-02, 6.45454545e-02, 6.54545455e-02, 6.63636364e-02,
       6.72727273e-02, 6.81818182e-02, 6.90909091e-02, 7.00000000e-02,
       7.09090909e-02, 7.18181818e-02, 7.27272727e-02, 7.36363636e-02,
       7.45454545e-02, 7.54545455e-02, 7.63636364e-02, 7.72727273e-02,
       7.81818182e-02, 7.90909091e-02, 8.00000000e-02, 8.09090909e-02,
       8.18181818e-02, 8.27272727e-02, 8.36363636e-02, 8.45454545e-02,
       8.54545455e-02, 8.63636364e-02, 8.72727273e-02, 8.81818182e-02,
       8.90909091e-02, 9.00000000e-02, 9.09090909e-02, 9.18181818e-02,
       9.27272727e-02, 9.36363636e-02, 9.45454545e-02, 9.54545455e-02,
       9.63636364e-02, 9.72727273e-02, 9.81818182e-02, 9.90909091e-02,
       1.00000000e-01, 1.06250000e-01, 1.12500000e-01, 1.18750000e-01,
       1.25000000e-01, 1.31250000e-01, 1.37500000e-01, 1.43750000e-01,
       1.50000000e-01, 1.56250000e-01, 1.62500000e-01, 1.68750000e-01,
       1.75000000e-01, 1.81250000e-01, 1.87500000e-01, 1.93750000e-01,
       2.00000000e-01};
	//std::vector<float> variance = {0.05, 0, 0.03, 0.09, 0.45};
	//srand(0xbeeff00d);
	//std::vector<float> variance = {50, 50, 50, 50, 50, 50, 50, 50, 50};

    for(const auto & vs: es){
		print_mse_robertson_sfs(201, vs, 0.5, 1*pow(10.f,4), 1*pow(10.f,6), 10*pow(10.f,-8)); 
	}


    std::cout << "Doing original impelementation" << std::endl;
    //std::vector<float> selection = {0, -.017, -.005, -.002};
	for(const auto & vs: es){
		print_mse_sfs(201, -1.0*vs, 1*pow(10.f,4), 1*pow(10.f,6), 10*pow(10.f,-8)); 
	}
    
}